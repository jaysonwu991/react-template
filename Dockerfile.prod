# set the base image
# This is the application image from which
# all other subsequent applications run
# why alpine? Alpine Linux is a security-oriented, lightweight
# Linux distribution. how small? how about 5Mb?
# in comparison ubuntu 18.04 is about 1.8Gb
FROM node:12 as jikerweb

# set working directory
# this is the working folder in the container
# from which the app will be running from
WORKDIR /app

# copy package.json and yarn.lock
# package.json to install the packages from
# and yarn.lock for a package called chokidar
# which is used for hot reloading
COPY package.json /app/package.json
COPY config/webpack.prod.js /app/config/webpack.prod.js

# since we are using local files and not copying them to docker
# add the container's node_modules folder to docker's $PATH
# so that it can find and watch it's dependencies
ENV PATH /app/node_modules/.bin:$PATH

# install and cache dependencies
RUN npm install --silent

# add files to app
COPY . /app

# build for publishing
RUN npm run build


# set up production environment
# the base image for this is an alpine based nginx image
FROM nginx:alpine

# copy the build folder from react to the root of nginx (www)
COPY --from=jikerweb /app/dist /usr/share/nginx/html

# --------- start: only for those using react router ----------

# if you are using react router
# you need to overwrite the default nginx configurations
# remove default nginx configuration file
RUN rm /etc/nginx/conf.d/default.conf

# replace with custom one
COPY config/nginx.conf /etc/nginx/conf.d

# --------- end: only for those using react router ----------

# expose port 80 to the outer world
EXPOSE 80

# start nginx
CMD ["nginx", "-g", "daemon off;"]
